:- consult('Logic.pl').

% TRADUCCIÃ“N ESPAÃ‘OL -> INGLÃ‰S
% traducir_es_en/1: Traduce una oraciÃ³n del espaÃ±ol al inglÃ©s
% ParÃ¡metro: OracionEs (string) - OraciÃ³n en espaÃ±ol a traducir
traducir_es_en(OracionEs) :-
    separar(OracionEs, PalabrasEs),          % Convierte string a lista de palabras
    (   oracion(PalabrasEs, _, PalabrasEn, _)  % Llama al analizador sintÃ¡ctico
    ->  lista_a_string(PalabrasEn, Traduccion), % Convierte lista a string
        write('TraducciÃ³n: '), write(Traduccion), nl,! % Muestra resultado
    ;   write('No entendÃ­ la oraciÃ³n.'), nl          % Manejo de error
    ).

% TRADUCCIÃ“N INGLÃ‰S -> ESPAÃ‘OL
% traducir_en_es/1: Traduce una oraciÃ³n del inglÃ©s al espaÃ±ol
% ParÃ¡metro: OracionEn (string) - OraciÃ³n en inglÃ©s a traducir
traducir_en_es(OracionEn) :-
    separar(OracionEn, PalabrasEn),          % Convierte string a lista de palabras
    (   oracion(PalabrasEs, _, PalabrasEn, _)  % Llama al analizador sintÃ¡ctico
    ->  lista_a_string(PalabrasEs, Traduccion), % Convierte lista a string
        write('TraducciÃ³n: '), write(Traduccion), nl,! % Muestra resultado
    ;   write('No entendÃ­ la oraciÃ³n.'), nl          % Manejo de error
    ).

% MODO INTERACTIVO ESPAÃ‘OL-INGLÃ‰S
% transLogEI/0: Bucle interactivo para traducciÃ³n espaÃ±ol â†’ inglÃ©s
% Finaliza cuando el usuario escribe "salir"
transLogEI :-
    write('TransLogEI> '), nl,
    read_line_to_string(user_input, Oracion), % Lee entrada del usuario
    (Oracion == 'salir' -> true;             % CondiciÃ³n de salida
     traducir_es_en(Oracion),                % Procesa la traducciÃ³n
     transLogEI).                            % Llama recursivamente

% MODO INTERACTIVO INGLÃ‰S-ESPAÃ‘OL
% transLogIE/0: Bucle interactivo para traducciÃ³n inglÃ©s â†’ espaÃ±ol
% Finaliza cuando el usuario escribe "quit"
transLogIE :-
    write('TransLogIE> '), nl,
    read_line_to_string(user_input, Oracion), % Lee entrada del usuario
    (Oracion == 'quit' -> true;              % CondiciÃ³n de salida
     traducir_en_es(Oracion),                % Procesa la traducciÃ³n
     transLogIE).                            % Llama recursivamente

% CONVERSIÃ“N DE LISTA A STRING
% lista_a_string/2: Convierte una lista de Ã¡tomos a un string unido por espacios
% ParÃ¡metros: Lista (lista de Ã¡tomos), String (string resultante)
lista_a_string(Lista, String) :-
    maplist(atom_string, Lista, Strings),    % Convierte Ã¡tomos a strings
    atomic_list_concat(Strings, ' ', String). % Une strings con espacios

% SEPARACIÃ“N DE PALABRAS
% separar/2: Divide un string en una lista de palabras (Ã¡tomos)
% ParÃ¡metros: Oracion (string), Palabras (lista de Ã¡tomos)
separar(Oracion, Palabras) :-
    split_string(Oracion, " ", "", Strings),  % Divide el string por espacios
    maplist(atom_string, Palabras, Strings). % Convierte strings a Ã¡tomos
% PREDICADO PARA MOSTRAR NÚMEROS DISPONIBLES
% mostrar_numeros/0: Muestra todos los números del 0 al 15 en ambos idiomas
mostrar_numeros :-
    writeln('=== NÚMEROS DEL 0 AL 15 ==='),
    writeln('Español    -> Inglés'),
    forall(numero(Es, En, _, _),
           format('~w       -> ~w~n', [Es, En])).

% PREDICADO PARA TRADUCIR SOLO NÚMEROS
% traducir_numero/2: Traduce un número entre español e inglés
traducir_numero(Numero, Traduccion) :-
    (   numero(Numero, Traduccion, _, _)
    ;   numero(Traduccion, Numero, _, _)
    ).

% EJEMPLOS DE USO CON NÚMEROS
% probar_numeros/0: Prueba traducciones con números
probar_numeros :-
    writeln('=== PRUEBAS CON NÚMEROS ==='),
    ejemplos_numeros(Ejemplos),
    forall(member(Espanol-Ingles, Ejemplos), (
        format('Español: ~w~n', [Espanol]),
        ( traducir_es_en(Espanol) ->
            format('Esperado: ~w~n', [Ingles])
        ;
            writeln('No se pudo traducir')
        ),
        nl
    )).

ejemplos_numeros([
    'tres manzanas',
    'cinco libros',
    'una casa',
    'dos mujeres',
    'diez estudiantes',
    'quince pájaros'
]).
